#!/bin/bash

set -x

# start "side stream" tests
cd $HOME

source $HOME/conf/config.sh
BASE=$RSYNCDIR
export SIDESTREAM_USE_LOCAL_IP=true
mynode=`cat $HOME/VAR/MYNODE`

# This is a whole lot easier...
killall paris_rollins.py
killall tdump8000.py
killall exitstats.py

if [ ! -f .sidedone2 ]; then
   rm -f .sidedone*
   mkdir -p $BASE/SideStream
   mkdir -p $BASE/paris-traceroute
   sudo chown root.root /usr/sbin/tcpdump
   sudo chmod 4755 /usr/sbin/tcpdump

   touch .sidedone2
fi

LOGF=$HOME/VAR/logs/SideStream.log
rm -f $LOGF
(
cd $BASE/SideStream
date
exitstats.py $mynode &
tdump8000.py $mynode &
) >> $LOGF 2>&1

LOGF=$HOME/VAR/logs/paris-traceroute.log
rm -f $LOGF


# The wait for /dev/shm/iupui_npad must run in the background.
#
# If the wait below runs in the foreground, then we create a live lock because
# 1) `vserver start` waits for the iupui_npad init scripts to return before
# running the vserver `post-start` script that mounts /dev/shm/iupui_npad, and
# 2) the npad initscript waits (here) for /dev/shm/iupui_npad to be mounted
# before returning.
#
# Running this block here in the background prevents the live lock.
(
# Wait until /dev/shm/iupui_npad is mounted by the
# vserver start sequence.
until grep /dev/shm/iupui_npad /proc/mounts; do
    sleep 1
done

# Start paris_rollins
paris_rollins.py -l $BASE/paris-traceroute >> $LOGF 2>&1 &
) &
